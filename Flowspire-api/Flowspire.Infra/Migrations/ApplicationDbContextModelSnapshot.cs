// <auto-generated />
using System;
using Flowspire.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flowspire.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.13");

            modelBuilder.Entity("AdvisorCustomer", b =>
                {
                    b.Property<string>("AdvisorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("AdvisorId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AdvisorCustomers");

                    b.HasData(
                        new
                        {
                            AdvisorId = "550e8400-e29b-41d4-a716-446655440002",
                            CustomerId = "550e8400-e29b-41d4-a716-446655440004",
                            AssignedAt = new DateTime(2025, 3, 22, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2840)
                        },
                        new
                        {
                            AdvisorId = "550e8400-e29b-41d4-a716-446655440002",
                            CustomerId = "550e8400-e29b-41d4-a716-446655440005",
                            AssignedAt = new DateTime(2025, 3, 27, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2840)
                        },
                        new
                        {
                            AdvisorId = "550e8400-e29b-41d4-a716-446655440003",
                            CustomerId = "550e8400-e29b-41d4-a716-446655440006",
                            AssignedAt = new DateTime(2025, 4, 1, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2840)
                        });
                });

            modelBuilder.Entity("Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 400.00m,
                            CategoryId = 1,
                            EndDate = new DateTime(2025, 5, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            StartDate = new DateTime(2024, 10, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 250.00m,
                            CategoryId = 3,
                            EndDate = new DateTime(2025, 5, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            StartDate = new DateTime(2024, 10, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1000.00m,
                            CategoryId = 4,
                            EndDate = new DateTime(2025, 5, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            StartDate = new DateTime(2024, 10, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 200.00m,
                            CategoryId = 5,
                            EndDate = new DateTime(2025, 5, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            StartDate = new DateTime(2024, 10, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 500.00m,
                            CategoryId = 6,
                            EndDate = new DateTime(2025, 5, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            StartDate = new DateTime(2024, 10, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 6,
                            Amount = 300.00m,
                            CategoryId = 7,
                            EndDate = new DateTime(2025, 6, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            StartDate = new DateTime(2025, 1, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 7,
                            Amount = 300.00m,
                            CategoryId = 8,
                            EndDate = new DateTime(2025, 5, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            StartDate = new DateTime(2024, 10, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 8,
                            Amount = 2000.00m,
                            CategoryId = 9,
                            EndDate = new DateTime(2025, 5, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            StartDate = new DateTime(2024, 10, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 9,
                            Amount = 150.00m,
                            CategoryId = 10,
                            EndDate = new DateTime(2025, 6, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            StartDate = new DateTime(2025, 1, 11, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2707),
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        });
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Food",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Transport",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Health",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Housing",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Leisure",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Education",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Clothing",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Food",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Technology",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Leisure",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        });
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Hello, I need help with my budget!",
                            IsRead = false,
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440002",
                            SenderId = "550e8400-e29b-41d4-a716-446655440004",
                            SentAt = new DateTime(2025, 4, 1, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2788)
                        },
                        new
                        {
                            Id = 2,
                            Content = "Sure, let’s review your expenses.",
                            IsRead = true,
                            ReadAt = new DateTime(2025, 4, 3, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2788),
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440004",
                            SenderId = "550e8400-e29b-41d4-a716-446655440002",
                            SentAt = new DateTime(2025, 4, 2, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2788)
                        },
                        new
                        {
                            Id = 3,
                            Content = "What is the best investment now?",
                            IsRead = false,
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440002",
                            SenderId = "550e8400-e29b-41d4-a716-446655440005",
                            SentAt = new DateTime(2025, 4, 6, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2788)
                        },
                        new
                        {
                            Id = 4,
                            Content = "I recommend index funds.",
                            IsRead = true,
                            ReadAt = new DateTime(2025, 4, 8, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2788),
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440005",
                            SenderId = "550e8400-e29b-41d4-a716-446655440002",
                            SentAt = new DateTime(2025, 4, 7, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2788)
                        },
                        new
                        {
                            Id = 5,
                            Content = "How can I reduce my expenses?",
                            IsRead = false,
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440003",
                            SenderId = "550e8400-e29b-41d4-a716-446655440006",
                            SentAt = new DateTime(2025, 4, 8, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2788)
                        },
                        new
                        {
                            Id = 6,
                            Content = "Let's review your categories.",
                            IsRead = false,
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440006",
                            SenderId = "550e8400-e29b-41d4-a716-446655440003",
                            SentAt = new DateTime(2025, 4, 9, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2788)
                        },
                        new
                        {
                            Id = 7,
                            Content = "Thank you for your help!",
                            IsRead = false,
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440002",
                            SenderId = "550e8400-e29b-41d4-a716-446655440004",
                            SentAt = new DateTime(2025, 4, 10, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2788)
                        });
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "660e8400-e29b-41d4-a716-446655440001",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "660e8400-e29b-41d4-a716-446655440002",
                            Name = "FinancialAdvisor",
                            NormalizedName = "FINANCIALADVISOR"
                        },
                        new
                        {
                            Id = "660e8400-e29b-41d4-a716-446655440003",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440001",
                            RoleId = "660e8400-e29b-41d4-a716-446655440001"
                        },
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440002",
                            RoleId = "660e8400-e29b-41d4-a716-446655440002"
                        },
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440003",
                            RoleId = "660e8400-e29b-41d4-a716-446655440002"
                        },
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440004",
                            RoleId = "660e8400-e29b-41d4-a716-446655440003"
                        },
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440005",
                            RoleId = "660e8400-e29b-41d4-a716-446655440003"
                        },
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440006",
                            RoleId = "660e8400-e29b-41d4-a716-446655440003"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = -80.00m,
                            CategoryId = 1,
                            Date = new DateTime(2024, 9, 26, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2590),
                            Description = "Supermarket",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 2,
                            Amount = -15.00m,
                            CategoryId = 2,
                            Date = new DateTime(2024, 10, 1, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2590),
                            Description = "Bus",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 2000.00m,
                            CategoryId = 1,
                            Date = new DateTime(2024, 10, 10, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2590),
                            Description = "Salary",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 4,
                            Amount = -50.00m,
                            CategoryId = 3,
                            Date = new DateTime(2024, 11, 6, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2590),
                            Description = "Pharmacy",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 5,
                            Amount = -800.00m,
                            CategoryId = 4,
                            Date = new DateTime(2024, 11, 8, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2590),
                            Description = "Rent",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 20,
                            Amount = -40.00m,
                            CategoryId = 5,
                            Date = new DateTime(2024, 10, 4, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2590),
                            Description = "Cinema",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 21,
                            Amount = -150.00m,
                            CategoryId = 6,
                            Date = new DateTime(2024, 10, 8, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2590),
                            Description = "Online Course",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 22,
                            Amount = 1000.00m,
                            CategoryId = 6,
                            Date = new DateTime(2024, 10, 9, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2590),
                            Description = "Freelance",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 35,
                            Amount = -70.00m,
                            CategoryId = 8,
                            Date = new DateTime(2024, 9, 29, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2590),
                            Description = "Restaurant",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 36,
                            Amount = -1500.00m,
                            CategoryId = 9,
                            Date = new DateTime(2024, 10, 6, 3, 42, 7, 403, DateTimeKind.Utc).AddTicks(2590),
                            Description = "Notebook",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440001",
                            AccessFailedCount = 0,
                            AddressLine1 = "123 Admin St.",
                            BirthDate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Admin City",
                            Country = "Admin Country",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@flowspire.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            Gender = 2,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FLOWSPIRE.COM",
                            NormalizedUserName = "ADMIN@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG6vczofrACNns/I8+X0rL0dW82I3gE2pGLmyJQP708Sq1VlBitrgLxaO95NslKwXg==",
                            PhoneNumber = "+15555550001",
                            PhoneNumberConfirmed = true,
                            PostalCode = "00000",
                            SecurityStamp = "c9a9e2d1-4ef6-45ac-9330-84beea2c9191",
                            State = "Admin State",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "admin@flowspire.com"
                        },
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440002",
                            AccessFailedCount = 0,
                            AddressLine1 = "101 Advisor Ave.",
                            BirthDate = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Advisor City",
                            Country = "Advisor Country",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "advisor1@flowspire.com",
                            EmailConfirmed = true,
                            FirstName = "Advisor",
                            Gender = 0,
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADVISOR1@FLOWSPIRE.COM",
                            NormalizedUserName = "ADVISOR1@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB4bhYBWqxe94lq8SK2ufkDWM25rIt+HC0yi8szLEgA4jpw1jOtsNrWKi9RXvR/SsQ==",
                            PhoneNumber = "+15555550002",
                            PhoneNumberConfirmed = true,
                            PostalCode = "11111",
                            SecurityStamp = "83facfb5-7998-48aa-9d6d-d052d82b7dd0",
                            State = "Advisor State",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "advisor1@flowspire.com"
                        },
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440003",
                            AccessFailedCount = 0,
                            AddressLine1 = "102 Advisor Ave.",
                            BirthDate = new DateTime(1987, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Advisor City",
                            Country = "Advisor Country",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "advisor2@flowspire.com",
                            EmailConfirmed = true,
                            FirstName = "Advisor",
                            Gender = 0,
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADVISOR2@FLOWSPIRE.COM",
                            NormalizedUserName = "ADVISOR2@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGbHd95LKof9KKwTWl5dUaWU25bE0nZSdBAWhCvM/NS1ECANr/aU6eW/1m4KC0ArbA==",
                            PhoneNumber = "+15555550003",
                            PhoneNumberConfirmed = true,
                            PostalCode = "11112",
                            SecurityStamp = "56823915-13eb-4974-acbc-c9fd25cc3846",
                            State = "Advisor State",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "advisor2@flowspire.com"
                        },
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440004",
                            AccessFailedCount = 0,
                            AddressLine1 = "201 Customer Rd.",
                            BirthDate = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Customer City",
                            Country = "Customer Country",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "customer1@flowspire.com",
                            EmailConfirmed = true,
                            FirstName = "Customer",
                            Gender = 1,
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER1@FLOWSPIRE.COM",
                            NormalizedUserName = "CUSTOMER1@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA5n4mJExREdmm9/9N+l8/BELlaSxi4/U3ufCfexlnqHs9DdkM+8KsnhTpL8zQndwQ==",
                            PhoneNumber = "+15555550004",
                            PhoneNumberConfirmed = true,
                            PostalCode = "22222",
                            SecurityStamp = "3d0932ef-e1ca-4f34-8364-0642bc195218",
                            State = "Customer State",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "customer1@flowspire.com"
                        },
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440005",
                            AccessFailedCount = 0,
                            AddressLine1 = "202 Customer Rd.",
                            BirthDate = new DateTime(1992, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Customer City",
                            Country = "Customer Country",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "customer2@flowspire.com",
                            EmailConfirmed = true,
                            FirstName = "Customer",
                            Gender = 1,
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER2@FLOWSPIRE.COM",
                            NormalizedUserName = "CUSTOMER2@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENuB6jGTQdA4BJ0t1z+RgtgIKC3QHjwYytsfO0ZcaH46l6HiLfWCTfBMd6kuBko01Q==",
                            PhoneNumber = "+15555550005",
                            PhoneNumberConfirmed = true,
                            PostalCode = "22223",
                            SecurityStamp = "837191ad-c608-48b4-9a75-9edf70f3342c",
                            State = "Customer State",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "customer2@flowspire.com"
                        },
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440006",
                            AccessFailedCount = 0,
                            AddressLine1 = "203 Customer Rd.",
                            BirthDate = new DateTime(1995, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Customer City",
                            Country = "Customer Country",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "customer3@flowspire.com",
                            EmailConfirmed = true,
                            FirstName = "Customer",
                            Gender = 2,
                            LastName = "Three",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER3@FLOWSPIRE.COM",
                            NormalizedUserName = "CUSTOMER3@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEU1TLbqNmWfzgyIwJKVwDT5nYYzRfK96/xaRsB10QV8D4Y98/n8eobEowzStz2j+g==",
                            PhoneNumber = "+15555550006",
                            PhoneNumberConfirmed = true,
                            PostalCode = "22224",
                            SecurityStamp = "15170f89-09dc-49ca-a082-e84414724e62",
                            State = "Customer State",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "customer3@flowspire.com"
                        });
                });

            modelBuilder.Entity("AdvisorCustomer", b =>
                {
                    b.HasOne("User", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Budget", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.Message", b =>
                {
                    b.HasOne("User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
