// <auto-generated />
using System;
using Flowspire.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flowspire.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250324010036_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.13");

            modelBuilder.Entity("AdvisorCustomer", b =>
                {
                    b.Property<string>("AdvisorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("AdvisorId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AdvisorCustomers");

                    b.HasData(
                        new
                        {
                            AdvisorId = "550e8400-e29b-41d4-a716-446655440002",
                            CustomerId = "550e8400-e29b-41d4-a716-446655440004",
                            AssignedAt = new DateTime(2025, 3, 4, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(2545)
                        },
                        new
                        {
                            AdvisorId = "550e8400-e29b-41d4-a716-446655440002",
                            CustomerId = "550e8400-e29b-41d4-a716-446655440005",
                            AssignedAt = new DateTime(2025, 3, 9, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(2545)
                        },
                        new
                        {
                            AdvisorId = "550e8400-e29b-41d4-a716-446655440003",
                            CustomerId = "550e8400-e29b-41d4-a716-446655440006",
                            AssignedAt = new DateTime(2025, 3, 14, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(2545)
                        });
                });

            modelBuilder.Entity("Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 400.00m,
                            CategoryId = 1,
                            EndDate = new DateTime(2025, 4, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            StartDate = new DateTime(2024, 9, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 250.00m,
                            CategoryId = 3,
                            EndDate = new DateTime(2025, 4, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            StartDate = new DateTime(2024, 9, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1000.00m,
                            CategoryId = 4,
                            EndDate = new DateTime(2025, 4, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            StartDate = new DateTime(2024, 9, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 200.00m,
                            CategoryId = 5,
                            EndDate = new DateTime(2025, 4, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            StartDate = new DateTime(2024, 9, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 500.00m,
                            CategoryId = 6,
                            EndDate = new DateTime(2025, 4, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            StartDate = new DateTime(2024, 9, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 6,
                            Amount = 300.00m,
                            CategoryId = 7,
                            EndDate = new DateTime(2025, 5, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            StartDate = new DateTime(2024, 12, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 7,
                            Amount = 300.00m,
                            CategoryId = 8,
                            EndDate = new DateTime(2025, 4, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            StartDate = new DateTime(2024, 9, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 8,
                            Amount = 2000.00m,
                            CategoryId = 9,
                            EndDate = new DateTime(2025, 4, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            StartDate = new DateTime(2024, 9, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 9,
                            Amount = 150.00m,
                            CategoryId = 10,
                            EndDate = new DateTime(2025, 5, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            StartDate = new DateTime(2024, 12, 24, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(1612),
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        });
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Alimentação",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Transporte",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Saúde",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Moradia",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Lazer",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Educação",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Vestuário",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Alimentação",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Tecnologia",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Lazer",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        });
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Olá, preciso de ajuda com meu orçamento!",
                            IsRead = false,
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440002",
                            SenderId = "550e8400-e29b-41d4-a716-446655440004",
                            SentAt = new DateTime(2025, 3, 14, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(2235)
                        },
                        new
                        {
                            Id = 2,
                            Content = "Claro, vamos analisar suas despesas.",
                            IsRead = true,
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440004",
                            SenderId = "550e8400-e29b-41d4-a716-446655440002",
                            SentAt = new DateTime(2025, 3, 15, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(2235)
                        },
                        new
                        {
                            Id = 3,
                            Content = "Qual é o melhor investimento agora?",
                            IsRead = false,
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440002",
                            SenderId = "550e8400-e29b-41d4-a716-446655440005",
                            SentAt = new DateTime(2025, 3, 19, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(2235)
                        },
                        new
                        {
                            Id = 4,
                            Content = "Recomendo fundos de índice.",
                            IsRead = true,
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440005",
                            SenderId = "550e8400-e29b-41d4-a716-446655440002",
                            SentAt = new DateTime(2025, 3, 20, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(2235)
                        },
                        new
                        {
                            Id = 5,
                            Content = "Como reduzir meus gastos?",
                            IsRead = false,
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440003",
                            SenderId = "550e8400-e29b-41d4-a716-446655440006",
                            SentAt = new DateTime(2025, 3, 21, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(2235)
                        },
                        new
                        {
                            Id = 6,
                            Content = "Vamos revisar suas categorias.",
                            IsRead = false,
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440006",
                            SenderId = "550e8400-e29b-41d4-a716-446655440003",
                            SentAt = new DateTime(2025, 3, 22, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(2235)
                        },
                        new
                        {
                            Id = 7,
                            Content = "Obrigado pela ajuda!",
                            IsRead = false,
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440002",
                            SenderId = "550e8400-e29b-41d4-a716-446655440004",
                            SentAt = new DateTime(2025, 3, 23, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(2235)
                        });
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "660e8400-e29b-41d4-a716-446655440001",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "660e8400-e29b-41d4-a716-446655440002",
                            Name = "FinancialAdvisor",
                            NormalizedName = "FINANCIALADVISOR"
                        },
                        new
                        {
                            Id = "660e8400-e29b-41d4-a716-446655440003",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440001",
                            RoleId = "660e8400-e29b-41d4-a716-446655440001"
                        },
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440002",
                            RoleId = "660e8400-e29b-41d4-a716-446655440002"
                        },
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440003",
                            RoleId = "660e8400-e29b-41d4-a716-446655440002"
                        },
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440004",
                            RoleId = "660e8400-e29b-41d4-a716-446655440003"
                        },
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440005",
                            RoleId = "660e8400-e29b-41d4-a716-446655440003"
                        },
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440006",
                            RoleId = "660e8400-e29b-41d4-a716-446655440003"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = -80.00m,
                            CategoryId = 1,
                            Date = new DateTime(2024, 9, 9, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Supermercado",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 2,
                            Amount = -15.00m,
                            CategoryId = 2,
                            Date = new DateTime(2024, 9, 14, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Ônibus",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 2000.00m,
                            CategoryId = 1,
                            Date = new DateTime(2024, 9, 23, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Salário",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 4,
                            Amount = -50.00m,
                            CategoryId = 3,
                            Date = new DateTime(2024, 10, 19, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Farmácia",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 5,
                            Amount = -800.00m,
                            CategoryId = 4,
                            Date = new DateTime(2024, 10, 21, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Aluguel",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 6,
                            Amount = -120.00m,
                            CategoryId = 1,
                            Date = new DateTime(2024, 10, 14, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Supermercado",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 7,
                            Amount = -100.00m,
                            CategoryId = 3,
                            Date = new DateTime(2024, 11, 4, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Consulta Médica",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 8,
                            Amount = -25.00m,
                            CategoryId = 2,
                            Date = new DateTime(2024, 11, 9, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Uber",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 9,
                            Amount = 2200.00m,
                            CategoryId = 1,
                            Date = new DateTime(2024, 11, 23, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Salário",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 10,
                            Amount = -90.00m,
                            CategoryId = 1,
                            Date = new DateTime(2024, 12, 6, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Mercado",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 11,
                            Amount = -30.00m,
                            CategoryId = 2,
                            Date = new DateTime(2024, 12, 12, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Táxi",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 12,
                            Amount = -850.00m,
                            CategoryId = 4,
                            Date = new DateTime(2024, 12, 19, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Aluguel",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 13,
                            Amount = 500.00m,
                            CategoryId = 1,
                            Date = new DateTime(2025, 1, 4, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Salário Extra",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 14,
                            Amount = -60.00m,
                            CategoryId = 3,
                            Date = new DateTime(2025, 1, 14, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Remédios",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 15,
                            Amount = -110.00m,
                            CategoryId = 1,
                            Date = new DateTime(2025, 1, 30, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Supermercado",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 16,
                            Amount = -20.00m,
                            CategoryId = 2,
                            Date = new DateTime(2025, 2, 9, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Ônibus",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 17,
                            Amount = 2300.00m,
                            CategoryId = 1,
                            Date = new DateTime(2025, 2, 23, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Salário",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 18,
                            Amount = -870.00m,
                            CategoryId = 4,
                            Date = new DateTime(2025, 3, 14, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Aluguel",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 19,
                            Amount = -45.00m,
                            CategoryId = 3,
                            Date = new DateTime(2025, 3, 19, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Farmácia",
                            UserId = "550e8400-e29b-41d4-a716-446655440004"
                        },
                        new
                        {
                            Id = 20,
                            Amount = -40.00m,
                            CategoryId = 5,
                            Date = new DateTime(2024, 9, 17, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Cinema",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 21,
                            Amount = -150.00m,
                            CategoryId = 6,
                            Date = new DateTime(2024, 9, 21, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Curso Online",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 22,
                            Amount = 1000.00m,
                            CategoryId = 6,
                            Date = new DateTime(2024, 9, 22, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Freelance",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 23,
                            Amount = -90.00m,
                            CategoryId = 7,
                            Date = new DateTime(2024, 10, 19, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Roupas",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 24,
                            Amount = -35.00m,
                            CategoryId = 5,
                            Date = new DateTime(2024, 10, 22, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Cinema",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 25,
                            Amount = -70.00m,
                            CategoryId = 6,
                            Date = new DateTime(2024, 11, 9, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Livro",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 26,
                            Amount = 1100.00m,
                            CategoryId = 6,
                            Date = new DateTime(2024, 11, 23, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Freelance",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 27,
                            Amount = -60.00m,
                            CategoryId = 5,
                            Date = new DateTime(2024, 12, 16, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Show",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 28,
                            Amount = -120.00m,
                            CategoryId = 7,
                            Date = new DateTime(2024, 12, 21, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Roupas",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 29,
                            Amount = -200.00m,
                            CategoryId = 6,
                            Date = new DateTime(2025, 1, 4, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Curso",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 30,
                            Amount = -45.00m,
                            CategoryId = 5,
                            Date = new DateTime(2025, 1, 14, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Cinema",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 31,
                            Amount = 1200.00m,
                            CategoryId = 6,
                            Date = new DateTime(2025, 2, 19, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Freelance",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 32,
                            Amount = -80.00m,
                            CategoryId = 5,
                            Date = new DateTime(2025, 2, 22, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Jantar",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 33,
                            Amount = -100.00m,
                            CategoryId = 7,
                            Date = new DateTime(2025, 3, 9, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Roupas",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 34,
                            Amount = -180.00m,
                            CategoryId = 6,
                            Date = new DateTime(2025, 3, 17, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Curso Online",
                            UserId = "550e8400-e29b-41d4-a716-446655440005"
                        },
                        new
                        {
                            Id = 35,
                            Amount = -70.00m,
                            CategoryId = 8,
                            Date = new DateTime(2024, 9, 12, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Restaurante",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 36,
                            Amount = -1500.00m,
                            CategoryId = 9,
                            Date = new DateTime(2024, 9, 19, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Notebook",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 37,
                            Amount = -50.00m,
                            CategoryId = 10,
                            Date = new DateTime(2024, 10, 14, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Jogo Online",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 38,
                            Amount = -100.00m,
                            CategoryId = 8,
                            Date = new DateTime(2024, 10, 21, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Supermercado",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 39,
                            Amount = -800.00m,
                            CategoryId = 9,
                            Date = new DateTime(2024, 11, 4, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Celular",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 40,
                            Amount = -30.00m,
                            CategoryId = 10,
                            Date = new DateTime(2024, 11, 17, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Cinema",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 41,
                            Amount = -90.00m,
                            CategoryId = 8,
                            Date = new DateTime(2024, 12, 9, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Restaurante",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 42,
                            Amount = -300.00m,
                            CategoryId = 9,
                            Date = new DateTime(2024, 12, 14, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Software",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 43,
                            Amount = -40.00m,
                            CategoryId = 10,
                            Date = new DateTime(2025, 1, 12, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Jogo",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 44,
                            Amount = 1800.00m,
                            CategoryId = 8,
                            Date = new DateTime(2025, 1, 23, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Salário",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 45,
                            Amount = -120.00m,
                            CategoryId = 8,
                            Date = new DateTime(2025, 2, 4, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Supermercado",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 46,
                            Amount = -150.00m,
                            CategoryId = 9,
                            Date = new DateTime(2025, 2, 14, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Acessório Tech",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 47,
                            Amount = -35.00m,
                            CategoryId = 10,
                            Date = new DateTime(2025, 3, 12, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Cinema",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        },
                        new
                        {
                            Id = 48,
                            Amount = 1900.00m,
                            CategoryId = 8,
                            Date = new DateTime(2025, 3, 22, 1, 0, 35, 210, DateTimeKind.Utc).AddTicks(979),
                            Description = "Salário",
                            UserId = "550e8400-e29b-41d4-a716-446655440006"
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440001",
                            AccessFailedCount = 0,
                            Email = "admin@flowspire.com",
                            EmailConfirmed = true,
                            FullName = "Admin User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FLOWSPIRE.COM",
                            NormalizedUserName = "ADMIN@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH7GAeUrQLGgmhPVP232MpBC0Py5RyfikFS0JhzQoAU4w6ZIWPK8evL1YvyrnrImZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "090079ad-b0a0-4cc7-8560-2fc65867b41b",
                            TwoFactorEnabled = false,
                            UserName = "admin@flowspire.com"
                        },
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440002",
                            AccessFailedCount = 0,
                            Email = "advisor1@flowspire.com",
                            EmailConfirmed = true,
                            FullName = "Advisor One",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADVISOR1@FLOWSPIRE.COM",
                            NormalizedUserName = "ADVISOR1@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKGN42al2OAD1wyV1DOhImf1FYtMY5ugJ1BQolI+Zbrp6ZY0lCN8vr2ZiVaJMlKfKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b81bace4-1f48-49bd-b9f3-971bc2d1ef34",
                            TwoFactorEnabled = false,
                            UserName = "advisor1@flowspire.com"
                        },
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440003",
                            AccessFailedCount = 0,
                            Email = "advisor2@flowspire.com",
                            EmailConfirmed = true,
                            FullName = "Advisor Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADVISOR2@FLOWSPIRE.COM",
                            NormalizedUserName = "ADVISOR2@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBwhW39tJmfssp4Ouhe4MGc56JIU0xoBv2pb7eqNVUs3kJ+6v0EacYZVvptgFkk2CQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb7e7e16-a090-4c60-8b91-50a6908d7714",
                            TwoFactorEnabled = false,
                            UserName = "advisor2@flowspire.com"
                        },
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440004",
                            AccessFailedCount = 0,
                            Email = "customer1@flowspire.com",
                            EmailConfirmed = true,
                            FullName = "Customer One",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER1@FLOWSPIRE.COM",
                            NormalizedUserName = "CUSTOMER1@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOgYDN1F6kF4dIEt7a/fpXQv42tf0+9dvX+bN2JIOLebpZA1yl509yM8ziv/qn1h/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea9ff4b4-5040-4b91-a563-1a04522cc76e",
                            TwoFactorEnabled = false,
                            UserName = "customer1@flowspire.com"
                        },
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440005",
                            AccessFailedCount = 0,
                            Email = "customer2@flowspire.com",
                            EmailConfirmed = true,
                            FullName = "Customer Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER2@FLOWSPIRE.COM",
                            NormalizedUserName = "CUSTOMER2@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPcEaZsjX4g994lAC0W9lNXBdyv4oJSyEyIpWNJhov76wlvMt2dM/qBmOBhPW1fPMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3bb4f7ae-6838-4439-9863-29c03c2df0bb",
                            TwoFactorEnabled = false,
                            UserName = "customer2@flowspire.com"
                        },
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440006",
                            AccessFailedCount = 0,
                            Email = "customer3@flowspire.com",
                            EmailConfirmed = true,
                            FullName = "Customer Three",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER3@FLOWSPIRE.COM",
                            NormalizedUserName = "CUSTOMER3@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELj/uFNN53wDdqPeVSnz1iJlbtJsIwcmimvvPHulavPdHQEJO4nYPeHkFA9KX0mdYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "334ec97c-1ab0-487c-a6dc-631e90f44c04",
                            TwoFactorEnabled = false,
                            UserName = "customer3@flowspire.com"
                        });
                });

            modelBuilder.Entity("AdvisorCustomer", b =>
                {
                    b.HasOne("User", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Budget", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.Message", b =>
                {
                    b.HasOne("User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
