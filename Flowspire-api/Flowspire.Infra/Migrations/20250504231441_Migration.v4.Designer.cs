// <auto-generated />
using System;
using Flowspire.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flowspire.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250504231441_Migration.v4")]
    partial class Migrationv4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.13");

            modelBuilder.Entity("AdvisorCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdvisorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("CustomerId");

                    b.ToTable("AdvisorCustomers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdvisorId = "550e8400-e29b-41d4-a716-446655440002",
                            AssignedAt = new DateTime(2025, 5, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(2064),
                            CustomerId = "550e8400-e29b-41d4-a716-446655440001"
                        });
                });

            modelBuilder.Entity("Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            EndDate = new DateTime(2025, 6, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(1698),
                            StartDate = new DateTime(2025, 4, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(1698),
                            UserId = "550e8400-e29b-41d4-a716-446655440002"
                        });
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("ExecutionTimeMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusCode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 5, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(1577),
                            Description = "Food expenses",
                            IsDefault = true,
                            Name = "Food",
                            SortOrder = 1,
                            UpdatedAt = new DateTime(2025, 5, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(1577),
                            UserId = "550e8400-e29b-41d4-a716-446655440002"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 5, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(1577),
                            Description = "Income category",
                            IsDefault = true,
                            Name = "Salary",
                            SortOrder = 2,
                            UpdatedAt = new DateTime(2025, 5, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(1577),
                            UserId = "550e8400-e29b-41d4-a716-446655440002"
                        });
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.FinancialTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Fee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("NextOccurrence")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = -100.00m,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 5, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(1621),
                            Date = new DateTime(2025, 5, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(1621),
                            Description = "Grocery",
                            Discount = 0.00m,
                            Fee = 0.00m,
                            IsRecurring = false,
                            PaymentMethod = "Cash",
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 5, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(1621),
                            UserId = "550e8400-e29b-41d4-a716-446655440002"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 2000.00m,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 5, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(1621),
                            Date = new DateTime(2025, 5, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(1621),
                            Description = "Monthly Salary",
                            Discount = 0.00m,
                            Fee = 0.00m,
                            IsRecurring = true,
                            NextOccurrence = new DateTime(2025, 6, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(1621),
                            PaymentMethod = "Bank",
                            Type = 0,
                            UpdatedAt = new DateTime(2025, 5, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(1621),
                            UserId = "550e8400-e29b-41d4-a716-446655440002"
                        });
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Hello",
                            IsRead = false,
                            ReceiverId = "550e8400-e29b-41d4-a716-446655440001",
                            SenderId = "550e8400-e29b-41d4-a716-446655440002",
                            SentAt = new DateTime(2025, 5, 4, 23, 14, 40, 432, DateTimeKind.Utc).AddTicks(2005)
                        });
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.Property("PhoneNumber")
                                .HasColumnName("User_PhoneNumber");
                        });

                    b.HasData(
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440001",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "81c2f749-abc7-450c-bd0a-5529c36879b5",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@flowspire.com",
                            EmailConfirmed = true,
                            Gender = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FLOWSPIRE.COM",
                            NormalizedUserName = "ADMIN@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKigXkpp9Rh/T4RVX7xQ7Xk4mWcaH/3b6nZVUjFcV3Wk5hrWOb+eGCG2golofUkU1Q==",
                            PhoneNumber = "+15555550001",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "72dc68b2-d38b-4d3f-8ed9-426569dc78e4",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin@flowspire.com"
                        },
                        new
                        {
                            Id = "550e8400-e29b-41d4-a716-446655440002",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6ebd5e24-ee1f-428d-806a-70651c256d5f",
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@flowspire.com",
                            EmailConfirmed = true,
                            Gender = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@FLOWSPIRE.COM",
                            NormalizedUserName = "USER@FLOWSPIRE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGMGde/8mI/Y3F3CoznwJ7XABAyWS2D0GzhhmlTYclINY/gXu/+FwELggQUy/MjkSg==",
                            PhoneNumber = "+15555550002",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0107079a-2c02-446a-ab6e-aa764afe3500",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "user@flowspire.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "660e8400-e29b-41d4-a716-446655440001",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "660e8400-e29b-41d4-a716-446655440002",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440001",
                            RoleId = "660e8400-e29b-41d4-a716-446655440001"
                        },
                        new
                        {
                            UserId = "550e8400-e29b-41d4-a716-446655440002",
                            RoleId = "660e8400-e29b-41d4-a716-446655440002"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AdvisorCustomer", b =>
                {
                    b.HasOne("Flowspire.Domain.Entities.User", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flowspire.Domain.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Budget", b =>
                {
                    b.HasOne("Flowspire.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flowspire.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Flowspire.Domain.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<int>("BudgetId")
                                .HasColumnType("INTEGER");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Amount");

                            b1.HasKey("BudgetId");

                            b1.ToTable("Budgets");

                            b1.WithOwner()
                                .HasForeignKey("BudgetId");

                            b1.HasData(
                                new
                                {
                                    BudgetId = 1,
                                    Value = 500.00m
                                });
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.Category", b =>
                {
                    b.HasOne("Flowspire.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.FinancialTransaction", b =>
                {
                    b.HasOne("Flowspire.Domain.Entities.Category", "Category")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flowspire.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.Message", b =>
                {
                    b.HasOne("Flowspire.Domain.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Flowspire.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Flowspire.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.User", b =>
                {
                    b.OwnsOne("Flowspire.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("Country");

                            b1.Property<string>("Line1")
                                .HasMaxLength(200)
                                .HasColumnType("TEXT")
                                .HasColumnName("AddressLine1");

                            b1.Property<string>("Line2")
                                .HasMaxLength(200)
                                .HasColumnType("TEXT")
                                .HasColumnName("AddressLine2");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("TEXT")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("State");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = "550e8400-e29b-41d4-a716-446655440001",
                                    City = "Admin City",
                                    Country = "Admin Country",
                                    Line1 = "123 Admin St.",
                                    PostalCode = "00000",
                                    State = "Admin State"
                                },
                                new
                                {
                                    UserId = "550e8400-e29b-41d4-a716-446655440002",
                                    City = "Test City",
                                    Line1 = "456 Test Ave.",
                                    PostalCode = "11111"
                                });
                        });

                    b.OwnsOne("Flowspire.Domain.ValueObjects.FullName", "Name", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = "550e8400-e29b-41d4-a716-446655440001",
                                    FirstName = "Admin",
                                    LastName = "User"
                                },
                                new
                                {
                                    UserId = "550e8400-e29b-41d4-a716-446655440002",
                                    FirstName = "Test",
                                    LastName = "User"
                                });
                        });

                    b.OwnsOne("Flowspire.Domain.ValueObjects.PhoneNumber", "Phone", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("TEXT")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = "550e8400-e29b-41d4-a716-446655440001",
                                    Value = "+15555550001"
                                },
                                new
                                {
                                    UserId = "550e8400-e29b-41d4-a716-446655440002",
                                    Value = "+15555550002"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Flowspire.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Flowspire.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flowspire.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Flowspire.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Flowspire.Domain.Entities.Category", b =>
                {
                    b.Navigation("FinancialTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
